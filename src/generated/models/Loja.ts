
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Loja` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Loja
 * 
 */
export type LojaModel = runtime.Types.Result.DefaultSelection<Prisma.$LojaPayload>

export type AggregateLoja = {
  _count: LojaCountAggregateOutputType | null
  _avg: LojaAvgAggregateOutputType | null
  _sum: LojaSumAggregateOutputType | null
  _min: LojaMinAggregateOutputType | null
  _max: LojaMaxAggregateOutputType | null
}

export type LojaAvgAggregateOutputType = {
  id: number | null
}

export type LojaSumAggregateOutputType = {
  id: number | null
}

export type LojaMinAggregateOutputType = {
  id: number | null
  nome: string | null
  endereco: string | null
}

export type LojaMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  endereco: string | null
}

export type LojaCountAggregateOutputType = {
  id: number
  nome: number
  endereco: number
  _all: number
}


export type LojaAvgAggregateInputType = {
  id?: true
}

export type LojaSumAggregateInputType = {
  id?: true
}

export type LojaMinAggregateInputType = {
  id?: true
  nome?: true
  endereco?: true
}

export type LojaMaxAggregateInputType = {
  id?: true
  nome?: true
  endereco?: true
}

export type LojaCountAggregateInputType = {
  id?: true
  nome?: true
  endereco?: true
  _all?: true
}

export type LojaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Loja to aggregate.
   */
  where?: Prisma.LojaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lojas to fetch.
   */
  orderBy?: Prisma.LojaOrderByWithRelationInput | Prisma.LojaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LojaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lojas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lojas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Lojas
  **/
  _count?: true | LojaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LojaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LojaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LojaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LojaMaxAggregateInputType
}

export type GetLojaAggregateType<T extends LojaAggregateArgs> = {
      [P in keyof T & keyof AggregateLoja]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLoja[P]>
    : Prisma.GetScalarType<T[P], AggregateLoja[P]>
}




export type LojaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LojaWhereInput
  orderBy?: Prisma.LojaOrderByWithAggregationInput | Prisma.LojaOrderByWithAggregationInput[]
  by: Prisma.LojaScalarFieldEnum[] | Prisma.LojaScalarFieldEnum
  having?: Prisma.LojaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LojaCountAggregateInputType | true
  _avg?: LojaAvgAggregateInputType
  _sum?: LojaSumAggregateInputType
  _min?: LojaMinAggregateInputType
  _max?: LojaMaxAggregateInputType
}

export type LojaGroupByOutputType = {
  id: number
  nome: string
  endereco: string
  _count: LojaCountAggregateOutputType | null
  _avg: LojaAvgAggregateOutputType | null
  _sum: LojaSumAggregateOutputType | null
  _min: LojaMinAggregateOutputType | null
  _max: LojaMaxAggregateOutputType | null
}

type GetLojaGroupByPayload<T extends LojaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LojaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LojaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LojaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LojaGroupByOutputType[P]>
      }
    >
  >



export type LojaWhereInput = {
  AND?: Prisma.LojaWhereInput | Prisma.LojaWhereInput[]
  OR?: Prisma.LojaWhereInput[]
  NOT?: Prisma.LojaWhereInput | Prisma.LojaWhereInput[]
  id?: Prisma.IntFilter<"Loja"> | number
  nome?: Prisma.StringFilter<"Loja"> | string
  endereco?: Prisma.StringFilter<"Loja"> | string
}

export type LojaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  endereco?: Prisma.SortOrder
}

export type LojaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.LojaWhereInput | Prisma.LojaWhereInput[]
  OR?: Prisma.LojaWhereInput[]
  NOT?: Prisma.LojaWhereInput | Prisma.LojaWhereInput[]
  nome?: Prisma.StringFilter<"Loja"> | string
  endereco?: Prisma.StringFilter<"Loja"> | string
}, "id">

export type LojaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  endereco?: Prisma.SortOrder
  _count?: Prisma.LojaCountOrderByAggregateInput
  _avg?: Prisma.LojaAvgOrderByAggregateInput
  _max?: Prisma.LojaMaxOrderByAggregateInput
  _min?: Prisma.LojaMinOrderByAggregateInput
  _sum?: Prisma.LojaSumOrderByAggregateInput
}

export type LojaScalarWhereWithAggregatesInput = {
  AND?: Prisma.LojaScalarWhereWithAggregatesInput | Prisma.LojaScalarWhereWithAggregatesInput[]
  OR?: Prisma.LojaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LojaScalarWhereWithAggregatesInput | Prisma.LojaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Loja"> | number
  nome?: Prisma.StringWithAggregatesFilter<"Loja"> | string
  endereco?: Prisma.StringWithAggregatesFilter<"Loja"> | string
}

export type LojaCreateInput = {
  nome: string
  endereco: string
}

export type LojaUncheckedCreateInput = {
  id?: number
  nome: string
  endereco: string
}

export type LojaUpdateInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  endereco?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LojaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  endereco?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LojaCreateManyInput = {
  id?: number
  nome: string
  endereco: string
}

export type LojaUpdateManyMutationInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  endereco?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LojaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  endereco?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LojaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  endereco?: Prisma.SortOrder
}

export type LojaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type LojaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  endereco?: Prisma.SortOrder
}

export type LojaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  endereco?: Prisma.SortOrder
}

export type LojaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type LojaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  endereco?: boolean
}, ExtArgs["result"]["loja"]>

export type LojaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  endereco?: boolean
}, ExtArgs["result"]["loja"]>

export type LojaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  endereco?: boolean
}, ExtArgs["result"]["loja"]>

export type LojaSelectScalar = {
  id?: boolean
  nome?: boolean
  endereco?: boolean
}

export type LojaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "endereco", ExtArgs["result"]["loja"]>

export type $LojaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Loja"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string
    endereco: string
  }, ExtArgs["result"]["loja"]>
  composites: {}
}

export type LojaGetPayload<S extends boolean | null | undefined | LojaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LojaPayload, S>

export type LojaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LojaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LojaCountAggregateInputType | true
  }

export interface LojaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loja'], meta: { name: 'Loja' } }
  /**
   * Find zero or one Loja that matches the filter.
   * @param {LojaFindUniqueArgs} args - Arguments to find a Loja
   * @example
   * // Get one Loja
   * const loja = await prisma.loja.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LojaFindUniqueArgs>(args: Prisma.SelectSubset<T, LojaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Loja that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LojaFindUniqueOrThrowArgs} args - Arguments to find a Loja
   * @example
   * // Get one Loja
   * const loja = await prisma.loja.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LojaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LojaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Loja that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaFindFirstArgs} args - Arguments to find a Loja
   * @example
   * // Get one Loja
   * const loja = await prisma.loja.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LojaFindFirstArgs>(args?: Prisma.SelectSubset<T, LojaFindFirstArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Loja that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaFindFirstOrThrowArgs} args - Arguments to find a Loja
   * @example
   * // Get one Loja
   * const loja = await prisma.loja.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LojaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LojaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Lojas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Lojas
   * const lojas = await prisma.loja.findMany()
   * 
   * // Get first 10 Lojas
   * const lojas = await prisma.loja.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const lojaWithIdOnly = await prisma.loja.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LojaFindManyArgs>(args?: Prisma.SelectSubset<T, LojaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Loja.
   * @param {LojaCreateArgs} args - Arguments to create a Loja.
   * @example
   * // Create one Loja
   * const Loja = await prisma.loja.create({
   *   data: {
   *     // ... data to create a Loja
   *   }
   * })
   * 
   */
  create<T extends LojaCreateArgs>(args: Prisma.SelectSubset<T, LojaCreateArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Lojas.
   * @param {LojaCreateManyArgs} args - Arguments to create many Lojas.
   * @example
   * // Create many Lojas
   * const loja = await prisma.loja.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LojaCreateManyArgs>(args?: Prisma.SelectSubset<T, LojaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Lojas and returns the data saved in the database.
   * @param {LojaCreateManyAndReturnArgs} args - Arguments to create many Lojas.
   * @example
   * // Create many Lojas
   * const loja = await prisma.loja.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Lojas and only return the `id`
   * const lojaWithIdOnly = await prisma.loja.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LojaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LojaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Loja.
   * @param {LojaDeleteArgs} args - Arguments to delete one Loja.
   * @example
   * // Delete one Loja
   * const Loja = await prisma.loja.delete({
   *   where: {
   *     // ... filter to delete one Loja
   *   }
   * })
   * 
   */
  delete<T extends LojaDeleteArgs>(args: Prisma.SelectSubset<T, LojaDeleteArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Loja.
   * @param {LojaUpdateArgs} args - Arguments to update one Loja.
   * @example
   * // Update one Loja
   * const loja = await prisma.loja.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LojaUpdateArgs>(args: Prisma.SelectSubset<T, LojaUpdateArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Lojas.
   * @param {LojaDeleteManyArgs} args - Arguments to filter Lojas to delete.
   * @example
   * // Delete a few Lojas
   * const { count } = await prisma.loja.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LojaDeleteManyArgs>(args?: Prisma.SelectSubset<T, LojaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lojas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Lojas
   * const loja = await prisma.loja.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LojaUpdateManyArgs>(args: Prisma.SelectSubset<T, LojaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Lojas and returns the data updated in the database.
   * @param {LojaUpdateManyAndReturnArgs} args - Arguments to update many Lojas.
   * @example
   * // Update many Lojas
   * const loja = await prisma.loja.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Lojas and only return the `id`
   * const lojaWithIdOnly = await prisma.loja.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LojaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LojaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Loja.
   * @param {LojaUpsertArgs} args - Arguments to update or create a Loja.
   * @example
   * // Update or create a Loja
   * const loja = await prisma.loja.upsert({
   *   create: {
   *     // ... data to create a Loja
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Loja we want to update
   *   }
   * })
   */
  upsert<T extends LojaUpsertArgs>(args: Prisma.SelectSubset<T, LojaUpsertArgs<ExtArgs>>): Prisma.Prisma__LojaClient<runtime.Types.Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Lojas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaCountArgs} args - Arguments to filter Lojas to count.
   * @example
   * // Count the number of Lojas
   * const count = await prisma.loja.count({
   *   where: {
   *     // ... the filter for the Lojas we want to count
   *   }
   * })
  **/
  count<T extends LojaCountArgs>(
    args?: Prisma.Subset<T, LojaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LojaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Loja.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LojaAggregateArgs>(args: Prisma.Subset<T, LojaAggregateArgs>): Prisma.PrismaPromise<GetLojaAggregateType<T>>

  /**
   * Group by Loja.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LojaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LojaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LojaGroupByArgs['orderBy'] }
      : { orderBy?: LojaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LojaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLojaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Loja model
 */
readonly fields: LojaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Loja.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LojaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Loja model
 */
export interface LojaFieldRefs {
  readonly id: Prisma.FieldRef<"Loja", 'Int'>
  readonly nome: Prisma.FieldRef<"Loja", 'String'>
  readonly endereco: Prisma.FieldRef<"Loja", 'String'>
}
    

// Custom InputTypes
/**
 * Loja findUnique
 */
export type LojaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * Filter, which Loja to fetch.
   */
  where: Prisma.LojaWhereUniqueInput
}

/**
 * Loja findUniqueOrThrow
 */
export type LojaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * Filter, which Loja to fetch.
   */
  where: Prisma.LojaWhereUniqueInput
}

/**
 * Loja findFirst
 */
export type LojaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * Filter, which Loja to fetch.
   */
  where?: Prisma.LojaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lojas to fetch.
   */
  orderBy?: Prisma.LojaOrderByWithRelationInput | Prisma.LojaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lojas.
   */
  cursor?: Prisma.LojaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lojas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lojas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lojas.
   */
  distinct?: Prisma.LojaScalarFieldEnum | Prisma.LojaScalarFieldEnum[]
}

/**
 * Loja findFirstOrThrow
 */
export type LojaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * Filter, which Loja to fetch.
   */
  where?: Prisma.LojaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lojas to fetch.
   */
  orderBy?: Prisma.LojaOrderByWithRelationInput | Prisma.LojaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Lojas.
   */
  cursor?: Prisma.LojaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lojas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lojas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Lojas.
   */
  distinct?: Prisma.LojaScalarFieldEnum | Prisma.LojaScalarFieldEnum[]
}

/**
 * Loja findMany
 */
export type LojaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * Filter, which Lojas to fetch.
   */
  where?: Prisma.LojaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Lojas to fetch.
   */
  orderBy?: Prisma.LojaOrderByWithRelationInput | Prisma.LojaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Lojas.
   */
  cursor?: Prisma.LojaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Lojas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Lojas.
   */
  skip?: number
  distinct?: Prisma.LojaScalarFieldEnum | Prisma.LojaScalarFieldEnum[]
}

/**
 * Loja create
 */
export type LojaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * The data needed to create a Loja.
   */
  data: Prisma.XOR<Prisma.LojaCreateInput, Prisma.LojaUncheckedCreateInput>
}

/**
 * Loja createMany
 */
export type LojaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Lojas.
   */
  data: Prisma.LojaCreateManyInput | Prisma.LojaCreateManyInput[]
}

/**
 * Loja createManyAndReturn
 */
export type LojaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * The data used to create many Lojas.
   */
  data: Prisma.LojaCreateManyInput | Prisma.LojaCreateManyInput[]
}

/**
 * Loja update
 */
export type LojaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * The data needed to update a Loja.
   */
  data: Prisma.XOR<Prisma.LojaUpdateInput, Prisma.LojaUncheckedUpdateInput>
  /**
   * Choose, which Loja to update.
   */
  where: Prisma.LojaWhereUniqueInput
}

/**
 * Loja updateMany
 */
export type LojaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Lojas.
   */
  data: Prisma.XOR<Prisma.LojaUpdateManyMutationInput, Prisma.LojaUncheckedUpdateManyInput>
  /**
   * Filter which Lojas to update
   */
  where?: Prisma.LojaWhereInput
  /**
   * Limit how many Lojas to update.
   */
  limit?: number
}

/**
 * Loja updateManyAndReturn
 */
export type LojaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * The data used to update Lojas.
   */
  data: Prisma.XOR<Prisma.LojaUpdateManyMutationInput, Prisma.LojaUncheckedUpdateManyInput>
  /**
   * Filter which Lojas to update
   */
  where?: Prisma.LojaWhereInput
  /**
   * Limit how many Lojas to update.
   */
  limit?: number
}

/**
 * Loja upsert
 */
export type LojaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * The filter to search for the Loja to update in case it exists.
   */
  where: Prisma.LojaWhereUniqueInput
  /**
   * In case the Loja found by the `where` argument doesn't exist, create a new Loja with this data.
   */
  create: Prisma.XOR<Prisma.LojaCreateInput, Prisma.LojaUncheckedCreateInput>
  /**
   * In case the Loja was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LojaUpdateInput, Prisma.LojaUncheckedUpdateInput>
}

/**
 * Loja delete
 */
export type LojaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
  /**
   * Filter which Loja to delete.
   */
  where: Prisma.LojaWhereUniqueInput
}

/**
 * Loja deleteMany
 */
export type LojaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lojas to delete
   */
  where?: Prisma.LojaWhereInput
  /**
   * Limit how many Lojas to delete.
   */
  limit?: number
}

/**
 * Loja without action
 */
export type LojaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Loja
   */
  select?: Prisma.LojaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Loja
   */
  omit?: Prisma.LojaOmit<ExtArgs> | null
}
